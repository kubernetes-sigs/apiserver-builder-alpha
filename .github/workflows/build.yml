name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  new:
    runs-on: ubuntu-latest
    name: Testing New Projects
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Install
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          go build -o ${GOPATH}/bin/apiserver-boot ./cmd/apiserver-boot/main.go
      - name: Testing on new project
        env:
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          mkdir -p test
          cp ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/Makefile.test test/
          cd test
          touch boilerplate.go.txt

          export PATH=${PATH}:${GOBIN}
          make test -f Makefile.test
  basic-example-build:
    runs-on: ubuntu-latest
    name: Testing Basic Example
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - name: Install controller-tools
        env:
          GO111MODULE: on
        run: |
          go mod init sigs.k8s.io/workspace
          go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.5.0
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Testing on examples
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/example/basic
        env:
          GOPATH: ${{ github.workspace }}/go
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          controller-gen  +object +paths=./pkg/apis/...
          export PATH=${PATH}:${GOBIN}
          go test ./pkg/...
  basic-example-container:
    runs-on: ubuntu-latest
    name: Testing Basic Example Container Build
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.0.0
      - name: Install apiserver-boot
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          go build -o ${GOPATH}/bin/apiserver-boot ./cmd/apiserver-boot/main.go
      - name: Install controller-tools
        env:
          GO111MODULE: on
        run: |
          go mod init sigs.k8s.io/workspace
          go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.5.0
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
      - name: Building and running container images
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/example/basic
        env:
          GOPATH: ${{ github.workspace }}/go
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          export PATH=${PATH}:${GOBIN}
          controller-gen  +object +paths=./pkg/apis/...

          export IMAGE="example.io/basic"
          apiserver-boot build container --image ${IMAGE}
          kind load docker-image ${IMAGE} --name chart-testing

          kubectl create -f config/

          sleep 120 # Hold for 2 min

          kubectl api-resources \
            || kubectl get pod -o name | grep basic-example-apiserver | xargs -I {} kubectl logs {} -c apiserver

          kubectl create -f sample/festival.yaml
          sleep 5 # Hold for 1min
          kubectl get festival festival-example -o jsonpath="{.spec.invited}" | grep 1 # successfully processed by controller

          kubectl create -f sample/university.yaml
          kubectl get university university-example -o jsonpath="{.spec.facultySize}" | grep 1
          kubectl replace --raw="/apis/miskatonic.k8s.io/v1beta1/namespaces/default/universities/university-example/scale" -f sample/university_scale.json  # scale subresource
          kubectl get university university-example -o jsonpath="{.spec.facultySize}" | grep 2
  kine-example-container:
    runs-on: ubuntu-latest
    name: Testing Kine Example Container Build
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: rootpassword
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.15
      - uses: actions/checkout@v2.3.1
        with:
          path: go/src/sigs.k8s.io/apiserver-builder-alpha/
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.0.0
      - name: Workspace Preparing
        env:
          GOPATH: ${{ github.workspace }}/go
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        run: |
          sudo systemctl start mysql.service
      - name: Install apiserver-boot
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/
        env:
          GOPATH: ${{ github.workspace }}/go
        run: |
          mkdir -p bin
          go build -o ${GOPATH}/bin/apiserver-boot ./cmd/apiserver-boot/main.go
      - name: Install controller-tools
        env:
          GO111MODULE: on
        run: |
          go mod init sigs.k8s.io/workspace
          go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.5.0
          go install sigs.k8s.io/controller-tools/cmd/controller-gen
      - name: Building and running container images
        working-directory: ${{ github.workspace }}/go/src/sigs.k8s.io/apiserver-builder-alpha/example/kine
        env:
          GOPATH: ${{ github.workspace }}/go
          GOBIN: ${{ github.workspace }}/go/bin
        run: |
          export PATH=${PATH}:${GOBIN}
          controller-gen  +object +paths=./pkg/apis/...

          export IMAGE="example.io/kine"
          apiserver-boot build container --image ${IMAGE}
          kind load docker-image ${IMAGE} --name chart-testing

          kubectl create -f config/

          sleep 120 # Hold for 2 min

          kubectl api-resources \
            || kubectl get pod -o name | grep kine-example-apiserver | xargs -I {} kubectl logs {} -c apiserver
          #kubectl create -f sample/festival.yaml

          #sleep 5 # Hold for 1min
          #kubectl get fs festival-example -o jsonpath="{.spec.invited}" | grep 1 # successfully processed by controller
